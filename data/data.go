package data

import "github.com/rrgmc/debefix/v2"

var (
	tableTags     = debefix.TableName("public.tags")
	tableUsers    = debefix.TableName("public.users")
	tablePosts    = debefix.TableName("public.posts")
	tablePostTags = debefix.TableName("public.post_tags")
)

func Data() *debefix.Data {
	data := debefix.NewData()

	data.AddValues(tableTags,
		debefix.MapValues{
			// this field value will be generated at resolve time, for example as a database autoincrement.
			"tag_id": debefix.ResolveValueResolve(),
			// sets the RefID to be targeted by `ValueRefID(tableTags, "go", "tag_id")`. Field is not added to the row values.
			"_refid": debefix.SetValueRefID("go"),
			"name":   "Go",
			// set the value as the resolver base time plus 1 hour.
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1)),
		},
		debefix.MapValues{
			"tag_id":     debefix.ResolveValueResolve(),
			"_refid":     debefix.SetValueRefID("javascript"),
			"name":       "JavaScript",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
		},
		debefix.MapValues{
			"tag_id":     debefix.ResolveValueResolve(),
			"_refid":     debefix.SetValueRefID("cpp"),
			"name":       "C++",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(1), debefix.WithAddMinutes(2)),
		},
	)

	data.AddValues(tableUsers,
		debefix.MapValues{
			"user_id": 1, // fixed ID, not generated by the database
			// sets the RefID to be targeted by `ValueRefID(tableUsers, "johndoe", "user_id")`. Field is not added to the row values.
			"_refid":     debefix.SetValueRefID("johndoe"),
			"name":       "John Doe",
			"email":      "john@example.com",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
		},
		debefix.MapValues{
			"user_id":    2,
			"_refid":     debefix.SetValueRefID("janedoe"),
			"name":       "Jane Doe",
			"email":      "jane@example.com",
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddMinutes(30)),
		},
	)

	// AddWithID returns an internal ID reference that can be used later.
	post1IID := data.AddWithID(tablePosts,
		debefix.MapValues{
			"post_id": debefix.ValueUUIDRandom(), // generates a random UUID value.
			"title":   "First post",
			"text":    "This is the text of the first post",
			// returns the value of the "user_id" field of the row with the "johndoe" RefID in the tableUsers table.
			// this also adds a dependency between "posts" and "users", so "users" will always be resolved before "posts".
			"user_id":    debefix.ValueRefID(tableUsers, "johndoe", "user_id"),
			"created_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
			"updated_at": debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
		})
	post2IID := data.AddWithID(tablePosts,
		debefix.MapValues{
			"post_id": debefix.ValueUUIDRandom(), // generates a random UUID value.
			// data is inserted in the order they were added, so it is possible to reference another row in the same table.
			"parent_post_id": post1IID.ValueForField("post_id"),
			"title":          "Second post",
			"text":           "This is the text of the second post",
			"user_id":        debefix.ValueRefID(tableUsers, "johndoe", "user_id"),
			"created_at":     debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
			"updated_at":     debefix.ValueBaseTimeAdd(debefix.WithAddHours(2)),
		},
	)

	data.AddValues(debefix.TableName(tablePostTags),
		debefix.MapValues{
			// returns the value of the "post_id" field of the row referenced by "post1IID", after it was resolved.
			"post_id": post1IID.ValueForField("post_id"),
			// tag_id is generated by the database, so the value will be resolved before being set here.
			"tag_id": debefix.ValueRefID(tableTags, "go", "tag_id"),
		},
		debefix.MapValues{
			"post_id": post1IID.ValueForField("post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "cpp", "tag_id"),
		},
		debefix.MapValues{
			// returns the value of the "post_id" field of the row referenced by "post2IID", after it was resolved.
			"post_id": post2IID.ValueForField("post_id"),
			"tag_id":  debefix.ValueRefID(tableTags, "javascript", "tag_id"),
		},
	)

	return data
}
